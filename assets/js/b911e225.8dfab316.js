"use strict";(self.webpackChunkbloksec_docs=self.webpackChunkbloksec_docs||[]).push([[7395],{3123:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>n,metadata:()=>r,toc:()=>l});var s=i(5893),o=i(1151);const n={id:"usecases-custom-app",title:"Integration with In-House / Custom Applications",sidebar_position:3,createdAt:new Date("2024-01-19T00:00:00.000Z"),tags:["Tutorial","Use Cases","Custom Application"]},a=void 0,r={id:"use-cases/usecases-custom-app",title:"Integration with In-House / Custom Applications",description:"Adding secure, passwordles login to your custom application is relatively easy with BlokSec - you will need to use two straightforward RESTful APIs - POST /registration and POST /auth&#x20;",source:"@site/docs/use-cases/custom-app.mdx",sourceDirName:"use-cases",slug:"/use-cases/usecases-custom-app",permalink:"/docs/use-cases/usecases-custom-app",draft:!1,unlisted:!1,tags:[{label:"Tutorial",permalink:"/docs/tags/tutorial"},{label:"Use Cases",permalink:"/docs/tags/use-cases"},{label:"Custom Application",permalink:"/docs/tags/custom-application"}],version:"current",sidebarPosition:3,frontMatter:{id:"usecases-custom-app",title:"Integration with In-House / Custom Applications",sidebar_position:3,createdAt:"2024-01-19T00:00:00.000Z",tags:["Tutorial","Use Cases","Custom Application"]},sidebar:"useCasesSidebar",previous:{title:"BlokSec for MFA / 2FA",permalink:"/docs/use-cases/usecases-mfa-2fa"}},c={},l=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Registration",id:"registration",level:2},{value:"Authentication / Authorization",id:"authentication--authorization",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Adding secure, passwordles login to your custom application is relatively easy with BlokSec - you will need to use two straightforward RESTful APIs - ",(0,s.jsx)(t.code,{children:"POST /registration"})," and ",(0,s.jsx)(t.code,{children:"POST /auth"})," "]}),"\n",(0,s.jsx)(t.h2,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,s.jsxs)(t.p,{children:["In order to use the required APIs, you will need an application created in the administrative console from which you can get the Application ID (required for the ",(0,s.jsx)(t.code,{children:"x-application-id"})," header) and Application Secret (required for the ",(0,s.jsx)(t.code,{children:"x-application-secret"})," header) required to authorize the API call. Please see ",(0,s.jsx)(t.a,{href:"docId:09SwEFbkYcKpaVIa56QJu",children:"Custom OIDC"})," for instructions on how to create this application in the BlokSec Admin Console."]}),"\n",(0,s.jsx)(t.h2,{id:"registration",children:"Registration"}),"\n",(0,s.jsxs)(t.p,{children:["Before users can use BlokSec for secure passwordless authentication, they must be registered. Registration can be done with a bulk-load utility, via SCIM API (docs coming soon), or in real-time by leveraging the ",(0,s.jsx)(t.code,{children:"POST /registration API"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Registrations are sent to users via email; the email contains a link to the registration request which must be retrieved by their authenticator app (e.g., the ",(0,s.jsx)(t.a,{href:"docId:n9VV-c4oLI7G5OUk1xOCS",children:"BlokSec yuID Authenticator App"}),", or ) to complete the linking of their account with their authenticator instance. How and when you register users is up to you, but it is important only to ensure that registrations are only sent to trusted, verified email addresses. We do recommend including registration as part of the new user onboarding process for your application while the user's identity is being established."]}),"\n",(0,s.jsxs)(t.p,{children:["To register a user with BlokSec, call the ",(0,s.jsx)(t.code,{children:"POST /registration"})," API:"]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://api.bloksec.io/api-docs/#/Registration/post_registration",children:"https://api.bloksec.io/api-docs/#/Registration/post_registration"})})}),"\n",(0,s.jsx)(t.p,{children:"For help on using the API including the schema, expected request values, and expected response, please see the OpenAPI documentation at the link above."}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsxs)(t.p,{children:["If you would like to check the status of a registration request, you can look it up with the ",(0,s.jsx)(t.code,{children:"GET /registration/{registrationId}"})," API with the registration ID returned by the POST /registration API:"]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://api.bloksec.io/api-docs/#/Registration/get_registration__registrationId",children:"https://api.bloksec.io/api-docs/#/Registration/get_registration__registrationId"}),"_"]})}),"\n",(0,s.jsx)(t.h2,{id:"authentication--authorization",children:"Authentication / Authorization"}),"\n",(0,s.jsxs)(t.p,{children:["Once a user has been registered, they're ready to perform MFA / 2FA authentication during login. You can also use the BlokSec service to perform step-up authorization during important transactions. To send an auth* request (auth = authentication or authorization) you invoke the ",(0,s.jsx)(t.code,{children:"POST /auth"})," API:"]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://api.bloksec.io/api-docs/#/Auth/post_auth",children:"https://api.bloksec.io/api-docs/#/Auth/post_auth"})})}),"\n",(0,s.jsx)(t.p,{children:"Note that this is a synchronous API so your call will block while waiting for the user's response. We suggesting showing a user-friendly message along with a spinner to provide the user with feedback that a response is pending their action. The following diagram illustrates the call sequence:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant Custom App\n    participant BlokSec\n    participant User\n    Custom App->>+BlokSec: POST /auth 'username'\n    Note right of Custom App: Synchronous API\n    BlokSec--\x3e>User: [Authentication Challenge]\n    User--\x3e>BlokSec: [Challenge Response]\n    BlokSec->>-Custom App: [success / failure]]\n"})}),"\n",(0,s.jsx)(t.p,{children:"The response from the API will have the following format:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "requestId": "622b95833bab53f6bba946d0",\n  "status": "accepted"\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},1151:(e,t,i)=>{i.d(t,{Z:()=>r,a:()=>a});var s=i(7294);const o={},n=s.createContext(o);function a(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);