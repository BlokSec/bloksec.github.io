"use strict";(self.webpackChunkbloksec_docs=self.webpackChunkbloksec_docs||[]).push([[7473],{8156:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=n(5893),s=n(1151);const o={},r="iOS SDK Integration",a={id:"api/iossdkintegration",title:"iOS SDK Integration",description:"The BlokSec SDK allows app developers to embed passwordless authentication into their own native siOS applications. In this way, users will have a smooth, consistent experience when authenticating to your application, and you don\u2019t need to work about the complex details of building web or mobile-native authentication.",source:"@site/docs/api/iossdkintegration.md",sourceDirName:"api",slug:"/api/iossdkintegration",permalink:"/docs/api/iossdkintegration",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"API Documentation",permalink:"/docs/api/intro"}},c={},l=[{value:"Compatibility",id:"compatibility",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"SDK Usage (Initialise)",id:"sdk-usage-initialise",level:2},{value:"New User Registration",id:"new-user-registration",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Account Association",id:"account-association",level:2},{value:"Restore / Backup",id:"restore--backup",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Shared Instance API",id:"shared-instance-api",level:3},{value:"User Registration API",id:"user-registration-api",level:3},{value:"Account Association APIs",id:"account-association-apis",level:3},{value:"Authentication APIs",id:"authentication-apis",level:3},{value:"Backup API",id:"backup-api",level:3},{value:"Restore API",id:"restore-api",level:3},{value:"Helper APIs",id:"helper-apis",level:3}];function h(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"ios-sdk-integration",children:"iOS SDK Integration"}),"\n",(0,i.jsx)(t.p,{children:"The BlokSec SDK allows app developers to embed passwordless authentication into their own native siOS applications. In this way, users will have a smooth, consistent experience when authenticating to your application, and you don\u2019t need to work about the complex details of building web or mobile-native authentication."}),"\n",(0,i.jsx)(t.h2,{id:"compatibility",children:"Compatibility"}),"\n",(0,i.jsx)(t.p,{children:"The BlokSec iOS SDK permits a deployment target of iOS 12.1 or higher. It requires Xcode 11+ and Swift 4.2+."}),"\n",(0,i.jsx)(t.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,i.jsx)(t.p,{children:"To be able to use the BlokSec SDK in iOS application, please follow the steps given below."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Download ",(0,i.jsx)(t.strong,{children:"BlokSec.xcframework"})," from the ",(0,i.jsx)(t.a,{href:"https://github.com/BlokSec/bloksec-sdk-ios/tree/main/BlokSec.xcframework",children:"BlokSec public GitHub iOS SDK repository"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Embed the above xcframework file to Host Application."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"In your app's source code files, use the following import syntax to include BlokSec Framework"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["\u201c",(0,i.jsx)(t.code,{children:"Import BlokSecFramework\u201d"})]}),"\n",(0,i.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(t.p,{children:["To complete authentication flow when the request is sent through Email or SMS, it comes as a URL, which is specially formatted to be handled by the BlokSec SDK. These URLs will have the FQDN (fully-qualified domain name) of ",(0,i.jsx)(t.a,{href:"https://bloksec.io",children:"https://bloksec.io"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["To properly handle these URLs, your app must be configured to handle the Universal links. (Please see [",(0,i.jsx)(t.a,{href:"https://developer.apple.com/ios/universal-links/",children:"https://developer.apple.com/ios/universal-links/"}),"]"," (",(0,i.jsx)(t.a,{href:"https://developer.apple.com/ios/universal-links/",children:"https://developer.apple.com/ios/universal-links/"}),") for more information about universal linking in iOS.) Update your AppDelegate to respond to the user activity object the system provides when a universal link routes to your app, as described in Supporting Universal Links in Your App With these pre-requisites completed, you are ready to begin leveraging the SDK in your application."]}),"\n",(0,i.jsx)(t.h2,{id:"sdk-usage-initialise",children:"SDK Usage (Initialise)"}),"\n",(0,i.jsx)(t.p,{children:"Each method in BlokSec SDK is asynchronous."}),"\n",(0,i.jsx)(t.p,{children:"Before using any API of the BlokSec SDK, its necessary to initialize the SDK. This can be done by accessing the shared instance of BlokSec of type BlokSecSDK:"}),"\n",(0,i.jsx)(t.p,{children:"BlokSec.shared"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"Sample Usage"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"guard let bloksec = BlokSec.shared else {\n// Failure Handling\nreturn\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"new-user-registration",children:"New User Registration"}),"\n",(0,i.jsx)(t.p,{children:"To register a new user, BlokSec SDK provides the below method"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"/** This method is used to register the User with the specified Registration Request\n    - Parameters:\n        - request: request of type BSRegistrationRequest containing relevant information to get registered\n */\n\npublic func registerUser (request: BlokSecFramework.BSRegistrationRequest, \nwithCompletion completion: BlokSecFramework.BlokSecSDKStartCompletion? = nil)\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Create ",(0,i.jsx)(t.code,{children:"BSRegistrationRequest"})," instance and call ",(0,i.jsx)(t.code,{children:"registerUser "}),"method"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"Sample usage"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"BlokSec.shared?.registerUser(request: registerNewUserRequest) { userId in \n  guard let userId = userId else {\n      // Failure Handling\n       return\n    }\n }\n"})}),"\n",(0,i.jsx)(t.h2,{id:"authentication",children:"Authentication"}),"\n",(0,i.jsx)(t.p,{children:"When you choose to login using BlokSec, an authentication request is sent to the app with a request ID which can be used to fetch the request object from the API. The authentication request may be sent via push notification, email, or SMS."}),"\n",(0,i.jsx)(t.p,{children:"**Push Notification\n**To complete authentication flow use below APIs in the sequence. "}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Get the request ID from the push notification Payload"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Email or SMS"})}),"\n",(0,i.jsxs)(t.p,{children:["In the case of Email or SMS, the user is given a URL with the domain ",(0,i.jsx)(t.code,{children:"https://bloksec.io/request/<requestID>"})," which will be delegated to your app to handle as a deep link."]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Extract <requestID> from the URL"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"After getting the request ID follow the below mentioned sequence of APIs to complete the authentication."}),"\n",(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Use the request ID, to fetch the request details which could be displayed to the user and ask for the consent:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"BlokSec.shared?.getAuthenticationRequest(...)"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Send the user response to the BlokSec service"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"BlokSec.sendAuthenticationResponse(...)"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"account-association",children:"Account Association"}),"\n",(0,i.jsxs)(t.p,{children:["When an account is registered with BlokSec for passwordless login, an email is sent with a link containing a registration ID in the format ",(0,i.jsx)(t.code,{children:"https://bloksec.io/registration/<registrationID>"})]}),"\n",(0,i.jsx)(t.p,{children:"To complete the registration, follow the given sequence of APIs:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Retrieve <registrationID> from the deep link (in the same way request URLs are handled above)"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Get the registration details using the method"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"BlokSec.shared?.getRegistrationDetails(...)"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Finally complete registration using the method"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"BlokSec.shared?.completeRegistration(...)"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"restore--backup",children:"Restore / Backup"}),"\n",(0,i.jsx)(t.p,{children:"This feature facilitates restore of all the accounts when you switch to new device or need to reset or restore the device (e.g., in the case of a lost phone)"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Backup"})}),"\n",(0,i.jsx)(t.p,{children:"To back up the user\u2019s root account information, use the below method. It requires you to send a PIN / passphrase. This PIN is important as it is used to encrypt the data being saved to the output QR code and is therefore required during the restore process. Please provide clear instructions to the user not to forget this PIN / passphrase, and to keep the QR code in a safe place."}),"\n",(0,i.jsx)(t.p,{children:"This method returns QR Code in form of UIImage. Save this QR Code securely. Without it, the user will not be able to restore their account(s) and would have to re-register."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"BlokSec.shared?.createBackupQRCode(..)"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Restore"})}),"\n",(0,i.jsx)(t.p,{children:"To restore the user, scan (or load from photos) the QR code that was generated during backup. Use below method to restore the account by passing the data extracted from QR code along with the passphrase and the device Token:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"BlokSec.shared?.restoreFromQRCode(...)"})}),"\n",(0,i.jsx)(t.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(t.h3,{id:"shared-instance-api",children:"Shared Instance API"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"/// Shared Instance to interact with the SDK\n  public static let shared: BlokSecFramework.BlokSecSDK?\n"})}),"\n",(0,i.jsx)(t.h3,{id:"user-registration-api",children:"User Registration API"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"/** This method is used to register the User with the specified Registration Request\n - Parameters:\n- request: request of type BSRegistrationRequest containing relevant information to get registered\n*/\n func registerUser(request: BlokSecFramework.BSRegistrationRequest, withCompletion completion: BlokSecFramework.BlokSecSDKStartCompletion?)\n /** This Method is used to raise the registration  request for use\n - Parameters:\n - request:  registration request of type BSRaiseRegistrationRequest\n- completion: Completion Closure providing the registration id of user\n*/\n func raiseRegistrationRequest(request: BlokSecFramework.BSRaiseRegistrationRequest, withCompletion completion: @escaping BlokSecFramework.RaiseRegistrationRequestResponse)\n"})}),"\n",(0,i.jsx)(t.h3,{id:"account-association-apis",children:"Account Association APIs"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"/** This Method is used to get the registration details of user\n- Parameters:\n- registrationId:  registration Id to fetch the details of registration of user\n- completion: Completion Closure providing the registration details of user of type RegistrationDetailsResponse\n*/\n func getRegistrationDetails(registrationId: String, completion: @escaping BlokSecFramework.RegistrationDetailsResponse)\n/** This Method is used to complete the registration of account\n- Parameters:\n- accountRequest:  account Request containing the meta data to create the account\n- completion: Completion Closure providing the created account or error of type CreateAccountResponse\n*/\nfunc completeRegistration(accountRequest: BlokSecFramework.BSAccountRequest, completion: @escaping BlokSecFramework.CreateAccountResponse)\n"})}),"\n",(0,i.jsx)(t.h3,{id:"authentication-apis",children:"Authentication APIs"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"/** This Method is used to raise the authentication request for use\n- Parameters:\n- request:  auth request of type BSRaiseAuthenticationRequest\n- completion: Completion Closure providing the registration id of user\n*/\nfunc raiseAuthenticationRequest(request: BlokSecFramework.BSRaiseAuthenticationRequest, withCompletion completion: @escaping BlokSecFramework.RaiseAuthenticationRequestResponse)\n\n/** This Method is used to authenticate the user for particular application\n- Parameters:\n- requestId: Auth request Id received in universal URL or push notification to authenticated\n- completion: Completion Closure providing the response of authentication or error of type AuthenticateRequestResponse\n*/\nfunc getAuthenticationRequest(requestId: String, completion: @escaping BlokSecFramework.AuthenticateRequestResponse)\n/** This Method is used to authenticate the user for particular application\n- Parameters:\n- latestpushNotificationRequestModel: Auth request Id received in universal URL or push notification to authenticated\n- completion: Completion Closure providing the response of authentication or error of type AuthenticateUserResponse\n*/\nfunc sendAuthenticationResponse(authRequest: BlokSecFramework.BSAuthenticationRequest, completion: @escaping BlokSecFramework.AuthenticateUserResponse)\n"})}),"\n",(0,i.jsx)(t.h3,{id:"backup-api",children:"Backup API"}),"\n",(0,i.jsx)(t.p,{children:"Returns a QR code which can be used later to restore the user's complete account tree. Note that a passphrase is used to encrypt the data; this passphrase must be supplied during the restore process in order to decrypt the incoming data. Without the valid passphrase, the QR code contains unusable, encrypted binary data."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"/** This method returns the QR Image for the backed up account with the specified passphrase\n- Parameters:\n- passphrase: Passphrase entered by user to backup the Account\n- Returns: Returns QR Code Image associated to the backup\n*/\nfunc createBackupQRCode(withPass passphrase: String) -> UIImage?\n"})}),"\n",(0,i.jsx)(t.h3,{id:"restore-api",children:"Restore API"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"/** This method is used to restore the Account from QR Info with the passphrase used during the backup\n- Parameters:\n- qrInfo: QR Info Retrieved by reading the QR of type String\n- passphrase: Passphrase entered by user to restore the Account of type String\n- deviceToken: Device Token in which the account needs to be restored of type optional String\n- completion: Completion Closure of type UserProfileCompletion that provides information of restored account\n*/\nfunc restoreFromQRCode(_ qrInfo: String, usingPassPhrase passphrase: String, inDevice deviceToken: String?, withCompletion completion: @escaping BlokSecFramework.UserProfileCompletion) throws\n"})}),"\n",(0,i.jsx)(t.h3,{id:"helper-apis",children:"Helper APIs"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"/** This Method is used to fetch the user Profile from Server\n- Parameters:\n- completion: Completion Closure providing the response of user profile or error of type UserProfileCompletion\n*/\nfunc getUserProfile(withCompletion completion: @escaping BlokSecFramework.UserProfileCompletion)\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>r});var i=n(7294);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);